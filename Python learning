# python2 vs python3
# Python 2 and Python 3 are two different versions of the Python programming language. Here are some key differences:

# 1. Print function:
# * Python 2: print "Hello, World!" (no parentheses)
# * Python 3: print("Hello, World!") (with parentheses)

# 2. Integer division:
# * Python 2: 5 / 2 = 2 (truncates to integer)
# * Python 3: 5 / 2 = 2.5 (returns float)

# 3. Unicode:
# * Python 2: Uses ASCII as default encoding
# * Python 3: Uses Unicode (UTF-8) as default encoding

# 4. Indentation:
# * Python 2: Allows mixing tabs and spaces for indentation
# * Python 3: Requires consistent use of either tabs or spaces for indentation

# 5. Syntax changes:
# * Python 2: xrange() function for iteration
# * Python 3: range() function for iteration (more efficient)

# 6. Library changes:
# * Python 2: Some libraries, like urllib and httplib, are merged into urllib3 in Python 3
# * Python 3: New libraries, like pathlib and asyncio, are introduced

# 7. Compatibility:
# * Python 2: Can run Python 2 code, but not Python 3 code
# * Python 3: Can run Python 3 code, but not Python 2 code (without modifications)

# In general, Python 3 is the recommended version for new projects, as it's more efficient, has better Unicode support,
#  and is the future of the language. However, some legacy projects may still use Python 2.



# data types of python
# Python has the following built-in data types:
# 1. Numeric Types:
#     - Integers (int): whole numbers, e.g., 1, 2, 3, etc.
#     - Floating Point Numbers (float): decimal numbers, e.g., 3.14, -0.5, etc.
#     - Complex Numbers (complex): numbers with real and imaginary parts, e.g., 3+4j, 2-3j, etc.
# 2. Sequence Types:
#     - Strings (str): sequences of characters, e.g., "hello", 'hello', etc.
#     - Lists (list): ordered collections of items, e.g., [1, 2, 3], ["a", "b", "c"], etc.
#     - Tuples (tuple): ordered, immutable collections of items, e.g., (1, 2, 3), ("a", "b", "c"), etc.
# 3. Mapping Type:
#     - Dictionaries (dict): unordered collections of key-value pairs, e.g., {"name": "John", "age": 30}, etc.
# 4. Set Types:
#     - Sets (set): unordered collections of unique items, e.g., {1, 2, 3}, {"a", "b", "c"}, etc.
#     - Frozensets (frozenset): immutable sets, e.g., frozenset({1, 2, 3}), etc.
# 5. Boolean Type:
#     - Boolean (bool): true or false values
# 6. Binary Type:
#     - Bytes (bytes): raw binary data, e.g., b'hello', etc.
#     - Bytearray (bytearray): mutable binary data, e.g., bytearray(b'hello'), etc.
# 7. None Type:
#     - None (NoneType): absence of a value

# These data types are the fundamental building blocks of Python programming. Understanding them is crucial for writing effective Python.






# difference between statement and function
# In Python, a statement and a function are two different concepts:
# Statement:
# A statement is a single line of code that performs an action or declares a variable. 
# It is executed once and does not return a value. Examples of statements include:

# - Assignment statements (e.g., x = 5)
# - Print statements (e.g., print("Hello"))
# - If-else statements (e.g., if x > 5: print("x is greater than 5"))
# - Loops (e.g., for i in range(5): print(i))

# Function:
# A function is a block of code that can be called multiple times from different parts of a program. 
# It takes arguments (inputs), performs some computation, and returns a value. 
# Functions are reusable and can be defined once and called many times. Examples of functions include:

# - Built-in functions (e.g., len(), print(), range())
# - User-defined functions (e.g., def greet(name): print("Hello, " + name))

# Key differences:

# - A statement is executed once, while a function can be called multiple times.
# - A statement does not return a value, while a function returns a value.
# - A statement is a single line of code, while a function is a block of code.

# In summary, statements are single lines of code that perform an action, 
# while functions are reusable blocks of code that take arguments and return values.







# 1. ḍifference between continue break and pass statement.
# continue
# Purpose: Skips the current iteration of a loop and moves to the next iteration.
# Usage: Typically used when you want to skip certain conditions within a loop.
# break
# Purpose: Exits the loop entirely, regardless of the iteration or condition.
# Usage: Used when you want to stop looping when a specific condition is met.
# pass
# Purpose: Acts as a placeholder; it does nothing and is used where a statement is syntactically required but no action is desired.
# Usage: Often used in defining functions or control structures that will be implemented later.

# 2. what is slicing and indexing and why we use.
# Indexing:-
# Definition: Indexing refers to accessing individual elements of a sequence (like strings, lists, or tuples) using their position.
# In Python, indexing starts at 0.
# Usage: To retrieve or modify a specific element in a sequence.

# Slicing:-
# Definition: Slicing allows you to access a range (or a subset) of elements from a sequence. 
# It involves specifying a start index, an end index, and an optional step.
# Syntax: sequence[start:end:step]
# Usage: To create a new sequence that includes elements from the specified range.

# 3. different type of lifescope of a variable.
# In programming, the lifecycle of a variable refers to the duration of time that the variable exists in memory, 
# which is influenced by its scope. Here are the different types of variable scopes in Python:
# (1). Local Scope
# Definition: Variables defined within a function or a block. They are only accessible within that function.
# Lifecycle: Exists during the execution of the function; destroyed when the function exits.

# (2). Enclosing Scope (Nonlocal)
# Definition: Variables defined in the enclosing function, accessible to nested functions.
# Lifecycle: Exists as long as the enclosing function is still executing.

# (3). Global Scope
# Definition: Variables defined at the top level of a script or module. They are accessible from any function within the same module.
# Lifecycle: Exists for the duration of the program’s execution.
    
# (4). Built-in Scope
# Definition: Contains names that are pre-defined in Python (like print, len, etc.). These are accessible from any part of the code.
# Lifecycle: Exists as long as the Python interpreter is running.

#  What is a loop in programming?
# A loop is a control structure that repeats a block of code as long as a specified condition is true.

# What is the difference between a `for` loop and a `while` loop?
# A `for` loop iterates a specific number of times, while a `while` loop continues until a condition is no longer true.

# What is nested looping?
# Nested looping refers to using a loop inside another loop.

